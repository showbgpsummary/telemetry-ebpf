// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIps returns the embedded CollectionSpec for ips.
func loadIps() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IpsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ips: %w", err)
	}

	return spec, err
}

// loadIpsObjects loads ips and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ipsObjects
//	*ipsPrograms
//	*ipsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIpsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIps()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ipsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ipsSpecs struct {
	ipsProgramSpecs
	ipsMapSpecs
	ipsVariableSpecs
}

// ipsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ipsProgramSpecs struct {
	Firewall *ebpf.ProgramSpec `ebpf:"firewall"`
}

// ipsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ipsMapSpecs struct {
	AllowedIpMap *ebpf.MapSpec `ebpf:"allowed_ip_map"`
	AllowedPorts *ebpf.MapSpec `ebpf:"allowed_ports"`
}

// ipsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ipsVariableSpecs struct {
}

// ipsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIpsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ipsObjects struct {
	ipsPrograms
	ipsMaps
	ipsVariables
}

func (o *ipsObjects) Close() error {
	return _IpsClose(
		&o.ipsPrograms,
		&o.ipsMaps,
	)
}

// ipsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIpsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ipsMaps struct {
	AllowedIpMap *ebpf.Map `ebpf:"allowed_ip_map"`
	AllowedPorts *ebpf.Map `ebpf:"allowed_ports"`
}

func (m *ipsMaps) Close() error {
	return _IpsClose(
		m.AllowedIpMap,
		m.AllowedPorts,
	)
}

// ipsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadIpsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ipsVariables struct {
}

// ipsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIpsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ipsPrograms struct {
	Firewall *ebpf.Program `ebpf:"firewall"`
}

func (p *ipsPrograms) Close() error {
	return _IpsClose(
		p.Firewall,
	)
}

func _IpsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ips_bpfeb.o
var _IpsBytes []byte
